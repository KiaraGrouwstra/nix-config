# This file contains default non-project-specific settings for 'stack', used
# in all projects.  For more information about stack's configuration, see
# http://docs.haskellstack.org/en/stable/yaml_configuration/

# The following parameters are used by "stack new" to automatically fill fields
# in the cabal config. We recommend uncommenting them and filling them out if
# you intend to use 'stack new'.
# See https://docs.haskellstack.org/en/stable/yaml_configuration/#templates
templates:
  params:
   author-name: Tycho Grouwstra
   author-email: tychogrouwstra@gmail.com
   copyright: Copyright (c) 2018 Tycho Grouwstra
   github-username: tycho01

nix:

  # false by default. Must be present and set to `true` to enable Nix.
  # You can set set it in your `$HOME/.stack/config.yaml` to enable
  # Nix for all your projects without having to repeat it
  enable: true

  # true by default. Tells Nix whether to run in a pure shell or not.
  pure: false

  # Empty by default. The list of packages you want to be
  # available in the nix-shell at build time (with `stack
  # build`) and run time (with `stack exec`).
  packages: [zlib.dev, zlib.out]
  
  # Unset by default. You cannot set this option if `packages:`
  # is already present and not empty.
  # shell-file: /home/tycho/.stack/shell.nix

  # A list of strings, empty by default. Additional options that
  # will be passed verbatim to the `nix-shell` command.
  nix-shell-options: []

  # A list of strings, empty by default, such as
  # `[nixpkgs=/my/local/nixpkgs/clone]` that will be used to override
  # NIX_PATH.
  path: []

  # false by default. Whether to add your nix dependencies as nix garbage
  # collection roots. This way, calling nix-collect-garbage will not remove
  # those packages from the nix store, saving you some time when running
  # stack build again with nix support activated.
  # This creates a `nix-gc-symlinks` directory in the project `.stack-work`.
  # To revert that, just delete this `nix-gc-symlinks` directory.
  add-gc-roots: false
